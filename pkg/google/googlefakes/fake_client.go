// Code generated by counterfeiter. DO NOT EDIT.
package googlefakes

import (
	"sync"

	"github.homedepot.com/cd/arcade/pkg/google"
)

type FakeClient struct {
	NewTokenStub        func() (string, error)
	newTokenMutex       sync.RWMutex
	newTokenArgsForCall []struct {
	}
	newTokenReturns struct {
		result1 string
		result2 error
	}
	newTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) NewToken() (string, error) {
	fake.newTokenMutex.Lock()
	ret, specificReturn := fake.newTokenReturnsOnCall[len(fake.newTokenArgsForCall)]
	fake.newTokenArgsForCall = append(fake.newTokenArgsForCall, struct {
	}{})
	fake.recordInvocation("NewToken", []interface{}{})
	fake.newTokenMutex.Unlock()
	if fake.NewTokenStub != nil {
		return fake.NewTokenStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) NewTokenCallCount() int {
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	return len(fake.newTokenArgsForCall)
}

func (fake *FakeClient) NewTokenCalls(stub func() (string, error)) {
	fake.newTokenMutex.Lock()
	defer fake.newTokenMutex.Unlock()
	fake.NewTokenStub = stub
}

func (fake *FakeClient) NewTokenReturns(result1 string, result2 error) {
	fake.newTokenMutex.Lock()
	defer fake.newTokenMutex.Unlock()
	fake.NewTokenStub = nil
	fake.newTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) NewTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.newTokenMutex.Lock()
	defer fake.newTokenMutex.Unlock()
	fake.NewTokenStub = nil
	if fake.newTokenReturnsOnCall == nil {
		fake.newTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.newTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ google.Client = new(FakeClient)
